// Generated by CoffeeScript 1.7.1
var User, UserBase, limited_infection, total_infection,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

User = (function() {
  function User(id) {
    this.id = id;
    this.infect = __bind(this.infect, this);
    this.infected = false;
    this.coaches = [];
    this.students = [];
    this.traversal = 0;
  }

  User.prototype.addCoach = function(coach) {
    if ((this.coaches.indexOf(coach)) === -1) {
      this.coaches.push(coach);
      return coach.addStudent(this);
    }
  };

  User.prototype.addCoaches = function(coaches) {
    var coach, i, _results;
    _results = [];
    for (i in coaches) {
      coach = coaches[i];
      _results.push(this.addCoach(coach));
    }
    return _results;
  };

  User.prototype.addStudent = function(student) {
    if ((this.students.indexOf(student)) === -1) {
      this.students.push(student);
      return student.addCoach(this);
    }
  };

  User.prototype.addStudents = function(students) {
    var i, student, _results;
    _results = [];
    for (i in students) {
      student = students[i];
      _results.push(this.addStudent(student));
    }
    return _results;
  };

  User.prototype.infect = function() {
    return this.infected = true;
  };

  User.prototype.usersInChain = function(infected, traversalID) {
    var coach, i, student, users, _ref, _ref1;
    users = 0;
    if (this.traversal !== traversalID) {
      this.traversal = traversalID;
      if (infected) {
        if (this.infected) {
          users++;
        }
      } else {
        users++;
      }
      _ref = this.students;
      for (i in _ref) {
        student = _ref[i];
        users += student.usersInChain(infected, traversalID);
      }
      _ref1 = this.coaches;
      for (i in _ref1) {
        coach = _ref1[i];
        users += coach.usersInChain(infected, traversalID);
      }
    }
    return users;
  };

  User.prototype.infectedStudents = function() {};

  User.prototype.totalInfection = function(traversalID) {
    var coach, i, student, _ref, _ref1, _results;
    if (this.traversal !== traversalID) {
      this.traversal = traversalID;
      this.infect();
      _ref = this.students;
      for (i in _ref) {
        student = _ref[i];
        student.totalInfection(traversalID);
      }
      _ref1 = this.coaches;
      _results = [];
      for (i in _ref1) {
        coach = _ref1[i];
        _results.push(coach.totalInfection(traversalID));
      }
      return _results;
    }
  };

  User.prototype.limitedInfection = function(userBase, traversalID) {};

  User.prototype.startTotalInfection = function() {
    var traversalID;
    traversalID = Math.floor(Math.random() * 1000);
    return this.totalInfection(traversalID);
  };

  User.prototype.startLimitedInfection = function() {
    var traversalID;
    traversalID = Math.floor(Math.random() * 1000);
    return user.limitedInfection(traversalID);
  };

  User.prototype.linkedUsers = function() {
    var traversalID;
    traversalID = Math.floor(Math.random() * 1000);
    return this.usersInChain(false, traversalID);
  };

  User.prototype.linkedInfectedUsers = function() {
    var traversalID;
    traversalID = Math.floor(Math.random() * 1000);
    return this.usersInChain(true, traversalID);
  };

  return User;

})();

UserBase = (function() {
  function UserBase() {
    this.users = [];
  }

  UserBase.prototype.populateUsers = function(ids) {
    var i, user, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = ids.length; _i < _len; _i += 1) {
      i = ids[_i];
      user = new User(i);
      _results.push(this.addUser(user));
    }
    return _results;
  };

  UserBase.prototype.addUser = function(user) {
    return this.users.push(user);
  };

  UserBase.prototype.totalUsers = function() {
    return this.users.length;
  };

  UserBase.prototype.getUser = function(id) {
    var i, selectedUser, user, _ref;
    selectedUser = null;
    _ref = this.users;
    for (i in _ref) {
      user = _ref[i];
      if (user.id === id) {
        selectedUser = user;
        break;
      }
    }
    return selectedUser;
  };

  return UserBase;

})();

total_infection = function(user) {
  return user.startTotalInfection();
};

limited_infection = function(user, infections) {
  return user.startLimitedInfection();
};
